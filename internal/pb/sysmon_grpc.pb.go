// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: sysmon.proto

package sysmon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sysmon_StreamStats_FullMethodName = "/sysmon.Sysmon/StreamStats"
)

// SysmonClient is the client API for Sysmon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysmonClient interface {
	StreamStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (Sysmon_StreamStatsClient, error)
}

type sysmonClient struct {
	cc grpc.ClientConnInterface
}

func NewSysmonClient(cc grpc.ClientConnInterface) SysmonClient {
	return &sysmonClient{cc}
}

func (c *sysmonClient) StreamStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (Sysmon_StreamStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sysmon_ServiceDesc.Streams[0], Sysmon_StreamStats_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sysmonStreamStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sysmon_StreamStatsClient interface {
	Recv() (*StatsResponse, error)
	grpc.ClientStream
}

type sysmonStreamStatsClient struct {
	grpc.ClientStream
}

func (x *sysmonStreamStatsClient) Recv() (*StatsResponse, error) {
	m := new(StatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SysmonServer is the server API for Sysmon service.
// All implementations must embed UnimplementedSysmonServer
// for forward compatibility
type SysmonServer interface {
	StreamStats(*StatsRequest, Sysmon_StreamStatsServer) error
	mustEmbedUnimplementedSysmonServer()
}

// UnimplementedSysmonServer must be embedded to have forward compatible implementations.
type UnimplementedSysmonServer struct {
}

func (UnimplementedSysmonServer) StreamStats(*StatsRequest, Sysmon_StreamStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStats not implemented")
}
func (UnimplementedSysmonServer) mustEmbedUnimplementedSysmonServer() {}

// UnsafeSysmonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysmonServer will
// result in compilation errors.
type UnsafeSysmonServer interface {
	mustEmbedUnimplementedSysmonServer()
}

func RegisterSysmonServer(s grpc.ServiceRegistrar, srv SysmonServer) {
	s.RegisterService(&Sysmon_ServiceDesc, srv)
}

func _Sysmon_StreamStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SysmonServer).StreamStats(m, &sysmonStreamStatsServer{stream})
}

type Sysmon_StreamStatsServer interface {
	Send(*StatsResponse) error
	grpc.ServerStream
}

type sysmonStreamStatsServer struct {
	grpc.ServerStream
}

func (x *sysmonStreamStatsServer) Send(m *StatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Sysmon_ServiceDesc is the grpc.ServiceDesc for Sysmon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sysmon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysmon.Sysmon",
	HandlerType: (*SysmonServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStats",
			Handler:       _Sysmon_StreamStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sysmon.proto",
}
